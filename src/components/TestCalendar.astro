<template id="week-template">
  <div
    class="grid grid-cols-7 border-0 border-neutral-600 bg-neutral-700 overflow-hidden"
  >
    <!-- Days of the month for each day -->
    <div
      class="dayOfMonths grid col-span-7 grid-cols-subgrid bg-neutral-700 border-neutral-600 border-t-[1px] -mb-32 h-[164px] z-0"
    >
    </div>
    <!-- Events grid -->
    <div
      class="events border-t border-neutral-600 z-10 h-32 grid-flow-dense grid-rows-auto col-span-7 *:h-8 ps-[1px] pe-[1px] py-[1px] gap-y-[1px] gap-x-[1px] grid grid-cols-subgrid scrollbar scrollbar-thumb-neutral-200 scrollbar-track-transparent scrollbar-thumb-rounded scrollbar-h-1 scrollbar-w-1 overflow-x-hidden overflow-y-auto"
    >
    </div>
  </div>
  <style>
    .grid-bg {
      background-image: linear-gradient(
        to right,
        rgb(85, 85, 85) 1px,
        transparent 0px
      );
      background-size: calc(calc(100% / 7)); /* 100% / 7 for 7 columns */
      background-repeat: repeat;
    }
  </style></template
>

<template id="dayHeaderTemplate">
  <div
    class="px-2 py-1 border-neutral-600 me-[-1px] border-e-[1px] text-right z-10"
  >
  </div>
</template>

<template id="event-template"
  ><div
    class="px-3 min-h-8 ms-[0px] me-[0px] bg-teal-900 border-teal-700 border rounded scrollbar-w-1 scrollbar overflow-hidden h-0 text-base"
  >
    <span class="align-middle">
      <slot>GovSource Tampa Public Safety Recruiting Summer Expo</slot>
    </span>
  </div>
</template>

<template id="calendar-template">
  <div
    class="bg-neutral-700 rounded overflow-hidden border border-neutral-600 text-lg"
  >
    <div
      class="py-2 text-center text-lg border-b border-x-0 border-neutral-600"
    >
      August 2024
    </div>
    <div class="grid grid-cols-7 *:text-center py-2">
      <div>Sun</div>
      <div>Mon</div>
      <div>Tue</div>
      <div>Wed</div>
      <div>Thur</div>
      <div>Fri</div>
      <div>Sat</div>
    </div>
    <div class="weeks"></div>
  </div>
</template>

<custom-calender></custom-calender>

<script>
  const today = new Date();
  const padNumber = (num) => num.toString().padStart(2, "0");
  const stripDateFromDatetime = (datetime) => datetime.substring(0, 10);
  const stripTimeFromDatetime = (datetime) => datetime.substring(11, 16);
  const stripMonthFromDatetime = (datetime) => datetime.substring(5, 7);
  const stripYearFromDatetime = (datetime) => datetime.substring(0, 4);
  const daysInMonth = (year, month) => new Date(year, month, 0).getDate();
  const firstWeekDay = (year, month) => new Date(year, month, 1).getDay();
  // const dateToMonthYear = (datetime) =>
  //   `${months[Number(stripMonthFromDatetime(datetime)) - 1]} ${stripYearFromDatetime(datetime)}`;
  // const toAmPm = (time) => {
  //   const [hours, minutes] = time.split(":");
  //   const ampm = Number(hours) >= 12 ? "PM" : "AM";
  //   return `${Number(hours) % 12 || 12}:${minutes} ${ampm}`;
  // };
  Date.prototype.addDays = function (days) {
    var date = new Date(this.valueOf());
    date.setDate(date.getDate() + days);
    return date;
  };

  const eventsContent = [
    {
      eventId: 224,
      eventName: "GovSource Tampa Public Safety Recruiting Summer Expo",
      startTime: "2024-08-14T11:00:00",
      endTime: "2024-08-14T15:00:00",
      isAllDay: false,
      locationName: "Hampton Inn \u0026 Suites Tampa/Ybor City/Downtown",
      address: "1301 E. 7th Avenue",
      cityStateZip: "Tampa, FL 33605",
      eventDetails:
        "Hillsborough County Sheriff\u0027s Office Recruiters will be at this event to explain sworn and civilian career opportunities and assist with applying to our Office.",
    },
    {
      eventId: 254,
      eventName: "Tampa Law Enforcement Hiring Expo",
      startTime: "2024-08-29T11:00:00",
      endTime: "2024-08-29T14:00:00",
      isAllDay: false,
      locationName: "Marriott Tampa Westshore ",
      address: "1001 N. Westshore Blvd.",
      cityStateZip: "Tampa, FL 33607",
      eventDetails:
        "Hillsborough County Sheriff\u0027s Office Recruiters will be at this event to explain sworn and civilian career opportunities and assist with applying to our Office.",
    },
    {
      eventId: 255,
      eventName: "Orlando Law Enforcement Hiring Expo",
      startTime: "2024-09-25T10:00:00",
      endTime: "2024-09-25T14:00:00",
      isAllDay: false,
      locationName: "Rosen Inn Lake Buena Vista",
      address: "8442 Palm Pkwy",
      cityStateZip: "Lake Buena Vista, FL 32836",
      eventDetails:
        "Hillsborough County Sheriff\u0027s Office Recruiters will be at this event to explain sworn and civilian career opportunities and assist with applying to our Office.",
    },
    {
      eventId: 256,
      eventName: "Tampa Veteran\u0027s Job Fair",
      startTime: "2024-10-10T11:00:00",
      endTime: "2024-10-10T15:00:00",
      isAllDay: false,
      locationName: "Tampa Convention Center",
      address: "333 S. Franklin Street",
      cityStateZip: "Tampa, FL 33602",
      eventDetails:
        "Hillsborough County Sheriff\u0027s Office Recruiters will be at this event to explain sworn and civilian career opportunities and assist with applying to our Office.",
    },
    {
      eventId: 257,
      eventName: "Jacksonville Veteran\u0027s Job Fair",
      startTime: "2024-11-14T11:00:00",
      endTime: "2024-11-14T15:00:00",
      isAllDay: false,
      locationName: "EverBank Stadium",
      address: "1 EverBank Stadium Drive",
      cityStateZip: "Jacksonville, FL 32202",
      eventDetails:
        "Hillsborough County Sheriff\u0027s Office Recruiters will be at this event to explain sworn and civilian career opportunities and assist with applying to our Office.",
    },
    {
      eventId: 258,
      eventName: "Orlando Veteran\u0027s Job Fair",
      startTime: "2024-12-12T11:00:00",
      endTime: "2024-12-12T15:00:00",
      isAllDay: false,
      locationName: null,
      address: null,
      cityStateZip: null,
      eventDetails:
        "Hillsborough County Sheriff\u0027s Office Recruiters will be at this event to explain sworn and civilian career opportunities and assist with applying to our Office.",
    },
  ];
  class CalendarEvent extends HTMLElement {
    constructor() {
      super();
      this.loadTemplate("#event-template");
      this.render();
    }

    static get observedAttributes() {
      return ["start", "end", "text"];
    }

    attributeChangedCallback(name, oldValue, newValue) {
      this.render();
    }

    init(start, end, eventContent) {
      this.setAttribute("start", start);
      this.setAttribute("end", end);
      this.setAttribute("text", eventContent.eventName);
    }

    loadTemplate(id) {
      const template = document.querySelector(id);
      const templateContent = template.content.cloneNode(true);
      this.appendChild(templateContent);
    }

    render() {
      const start = this.getAttribute("start") || "1";
      const end = this.getAttribute("end") || "2";
      const color = this.getAttribute("color") || "blue";
      const text = this.getAttribute("text") || "";

      const slot = this.querySelector("span");
      slot.textContent = text;
      this.style.gridColumnStart = start;
      this.style.gridColumnEnd = end;
    }
  }

  class CalendarWeek extends HTMLElement {
    dayHeaderTemplate = document.getElementById("dayHeaderTemplate");
    days;

    constructor(days) {
      super();
      this.days = days;
      this.loadTemplate("#week-template");
      this.render();
    }

    loadTemplate(id) {
      const template = document.querySelector(id);
      const templateContent = template.content.cloneNode(true);
      this.appendChild(templateContent);
    }

    populateEvents() {
      const eventHolder = this.querySelector(".events");
      const weekStart = this.days[0].fullDate;
      const weekEnd = this.days[this.days.length - 1].fullDate;
      eventsContent
        .filter(
          (event) =>
            new Date(event.startTime) >= weekStart &&
            new Date(event.endTime) <= weekEnd
        )
        .forEach((eventContent) => {
          console.log("valid event in range");
          const event = new CalendarEvent();
          console.log(weekStart, new Date(eventContent.endTime));
          const start = 1;
          const end = 4;
          event.init(start, end, eventContent);
          eventHolder.appendChild(event);
        });
    }

    populateWeekHeader() {
      const dayOfMonthsHolder = this.querySelector(".dayOfMonths");
      console.log(this.days);
      for (const { month, date, year, weekDay, isToday, isThisMonth } of this
        .days) {
        const dayHeader = this.dayHeaderTemplate.content.cloneNode(true);
        dayHeader.querySelector("div").textContent = String(date);
        if (!isThisMonth) {
          dayHeader
            .querySelector("div")
            .classList.add(
              "text-white",
              "bg-neutral-800",
              "opacity-30",
              "border-neutral-500"
            );
        }
        dayOfMonthsHolder.appendChild(dayHeader);
      }
    }

    render() {
      this.populateWeekHeader();
      this.populateEvents();
    }
  }

  class CustomCalender extends HTMLElement {
    days = [];
    weeks;
    selectedYear = 2024;
    selectedMonth = 7;
    firstWeekday = 0;
    daysThisMonth = 0;

    static get observedAttributes() {
      return ["year", "month"];
    }

    attributeChangedCallback(name, oldValue, newValue) {
      this.render();
    }

    constructor() {
      super();
      this.loadTemplate("#calendar-template");
      this.render();
      this.setAttribute("year", String(this.selectedYear));
      this.setAttribute("month", String(this.selectedMonth));
    }

    loadTemplate(id) {
      const template = document.querySelector(id);
      const templateContent = template.content.cloneNode(true);
      this.appendChild(templateContent);
    }

    generateWeeks() {
      const numOfWeeks = Math.ceil(this.days.length / 7);
      const weeks = document.createDocumentFragment();
      for (let i = 0; i < numOfWeeks; i++) {
        const week = new CalendarWeek(this.days.slice(i * 7, (i + 1) * 7));
        weeks.appendChild(week);
      }
      console.log(weeks);
      return weeks;
    }

    generateDaysArray() {
      const days = [];
      this.daysThisMonth = daysInMonth(this.selectedYear, this.selectedMonth);
      this.firstWeekday = firstWeekDay(this.selectedYear, this.selectedMonth);

      // Add days from previous month
      for (let i = 0; i < this.firstWeekday; i++) {
        const month = this.selectedMonth === 0 ? 11 : this.selectedMonth - 1;
        const year =
          this.selectedMonth === 0 ? this.selectedYear - 1 : this.selectedYear;
        const date =
          daysInMonth(this.selectedMonth, this.selectedMonth) +
          i -
          this.firstWeekday +
          1;
        const dateObj = {
          month,
          year,
          date: date,
          weekDay: (this.firstWeekday - i) % 7,
          isToday: false,
          isThisMonth: false,
          fullDate: new Date(
            `${year}-${padNumber(month + 1)}-${padNumber(date)}`
          ),
        };
        days.push(dateObj);
      }
      // Add days from current month
      for (let i = 0; i < this.daysThisMonth; i++) {
        const month = this.selectedMonth;
        const year = this.selectedYear;
        const date = i + 1;
        const dateObj = {
          month,
          year,
          date,
          weekDay: (this.firstWeekday + i) % 7,
          isToday:
            today.getDate() == i + 1 &&
            today.getMonth() == this.selectedMonth &&
            today.getFullYear() == this.selectedYear,
          isThisMonth: true,
          fullDate: new Date(
            `${year}-${padNumber(month + 1)}-${padNumber(date)}`
          ),
        };
        days.push(dateObj);
      }
      // Add days from next month
      for (
        let i = days[days.length - 1].weekDay, dayOfMonth = 1;
        i < 6;
        i++, dayOfMonth++
      ) {
        const month = this.selectedMonth === 11 ? 0 : this.selectedMonth + 1;
        const year =
          this.selectedMonth === 11 ? this.selectedYear + 1 : this.selectedYear;
        const date = (this.firstWeekday + this.days.length + i) % 7;
        const dateObj = {
          month,
          year,
          dayOfMonth,
          date,
          isToday: false,
          weekDay: i,
          isThisMonth: false,
          fullDate: new Date(
            `${year}-${padNumber(month + 1)}-${padNumber(dayOfMonth)}`
          ),
        };
        days.push(dateObj);
      }

      return days;
    }

    render() {
      this.days = this.generateDaysArray();
      this.weeks = this.generateWeeks();
      this.querySelector(".weeks").appendChild(this.weeks);
    }
  }

  customElements.define("calendar-event", CalendarEvent);
  customElements.define("calendar-week", CalendarWeek);
  customElements.define("custom-calender", CustomCalender);
</script>
